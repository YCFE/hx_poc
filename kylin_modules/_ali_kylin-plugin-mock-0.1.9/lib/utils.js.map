{"version":3,"sources":["../src/utils.js"],"names":["getLangConfigStatus","cwd","process","configDir","absoluteConfigDir","langConfigDir","ret","dir","files","fileStat","statSync","isDirectory","success","msg","fileList","sync","resolve","length","yellow","map","relative","p","join","red","ex","console","error"],"mappings":";;;;;QAQgBA,mB,GAAAA,mB;;AAPhB;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMC,MAAMC,QAAQD,GAAR,EAAZ;;AAEO,SAASD,mBAAT,OAIJ;AAAA,MAHDC,GAGC,QAHDA,GAGC;AAAA,MAFDE,SAEC,QAFDA,SAEC;AAAA,MADDC,iBACC,QADDA,iBACC;;;AAED,MAAMC,gBAAgBD,iBAAtB;;AAEA,MAAME,MAAM;AACVC,SAAK,EADK;AAEVC,WAAO;AAFG,GAAZ;;AAKA,MAAI;AACF,QAAMC,WAAW,aAAGC,QAAH,CAAYL,aAAZ,CAAjB;AACA,QAAKI,SAASE,WAAT,EAAL,EAA8B;AAC5BL,UAAIC,GAAJ,GAAU;AACRK,iBAAS,IADD;AAERC,mBAAUV,SAAV;AAFQ,OAAV;;AAKA,UAAMW,WAAW,eAAKC,IAAL,CAAU,eAAKC,OAAL,CAAaX,aAAb,EAA4B,MAA5B,CAAV,CAAjB;AACA,UAAKS,SAASG,MAAT,GAAkB,CAAvB,EAA2B;AACzBX,YAAIE,KAAJ,GAAY;AACVI,mBAAS,IADC;AAEVC,qBAAUV,SAAV,gDAAkC,gBAAMe,MAAN,CAAcJ,SAASK,GAAT,CAAa;AAAA,mBAAK,eAAKC,QAAL,CAAcf,aAAd,EAA6BgB,CAA7B,CAAL;AAAA,WAAb,EAAmDC,IAAnD,CAAwD,IAAxD,CAAd,CAAlC;AAFU,SAAZ;AAID,OALD,MAKO;AACLhB,YAAIE,KAAJ,GAAY;AACVI,mBAAS,KADC;AAEVC,qBAAU,gBAAMU,GAAN,CAAUpB,SAAV,CAAV,wCAA0C,gBAAMoB,GAAN,CAAU,MAAV,CAA1C;AAFU,SAAZ;AAID;AACF,KAlBD,MAkBO;AACLjB,UAAIC,GAAJ,GAAU;AACRK,iBAAS,KADD;AAERC,mBAAU,gBAAMU,GAAN,CAAUpB,SAAV,CAAV;AAFQ,OAAV;AAID;AACF,GA1BD,CA2BA,OAAMqB,EAAN,EAAU;AACRC,YAAQC,KAAR,CAAcF,EAAd;AACAlB,QAAIC,GAAJ,GAAU;AACRK,eAAS,KADD;AAERC,iBAAU,gBAAMU,GAAN,CAAUpB,SAAV,CAAV;AAFQ,KAAV;AAID;;AAED,SAAOG,GAAP;AACD","file":"utils.js","sourcesContent":["\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport glob from 'glob';\nimport path from 'path';\n\nconst cwd = process.cwd();\n\nexport function getLangConfigStatus({\n  cwd,\n  configDir,\n  absoluteConfigDir\n}) {\n\n  const langConfigDir = absoluteConfigDir;\n\n  const ret = {\n    dir: {},\n    files: {},\n  };\n\n  try {\n    const fileStat = fs.statSync(langConfigDir);\n    if ( fileStat.isDirectory() ) {\n      ret.dir = {\n        success: true,\n        msg: `[${ configDir }] 目录存在`\n      };\n      // 尝试读取文件列表\n      const fileList = glob.sync(path.resolve(langConfigDir, '*.js'));\n      if ( fileList.length > 0 ) {\n        ret.files = {\n          success: true,\n          msg: `[${ configDir }] 包含语言文件[ ${ chalk.yellow( fileList.map(p => path.relative(langConfigDir, p)).join(', ') ) }]`\n        }\n      } else {\n        ret.files = {\n          success: false,\n          msg: `[${ chalk.red(configDir) }] 目录不包含${ chalk.red('*.js') }文件`\n        }\n      }\n    } else {\n      ret.dir = {\n        success: false,\n        msg: `[${ chalk.red(configDir) }] 不是目录`\n      }\n    }\n  }\n  catch(ex) {\n    console.error(ex)\n    ret.dir = {\n      success: false,\n      msg: `[${ chalk.red(configDir) }] 目录不存在`\n    }\n  }\n\n  return ret;\n}"]}