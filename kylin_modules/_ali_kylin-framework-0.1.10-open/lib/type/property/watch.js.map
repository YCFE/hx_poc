{"version":3,"sources":["../../../src/type/property/watch.js"],"names":["processor","decorator","Watch","propertyKey","prototypeKey","proto","key","options","watches","Object","keys","forEach","watch","k","descriptor","create","originalWatch","initializer","watchKey","watchOption","decorate","methodName"],"mappings":";;;;QAKgBA,S,GAAAA,S;QAYAC,S,GAAAA,S;QAkBAC,K,GAAAA,K;;AAnChB;;AAEO,IAAMC,oCAAc,OAApB;AACA,IAAMC,sCAAe,SAArB;;AAEA,SAASJ,SAAT,CAAmBK,KAAnB,EAA0BC,GAA1B,EAA+BC,OAA/B,EAAwC;AAC7C,MAAMC,UAAUH,MAAM,SAAN,CAAhB;AACA,MAAI,CAACG,OAAL,EAAc;;AAEdC,SAAOC,IAAP,CAAYF,OAAZ,EAAqBG,OAArB,CAA6B,aAAK;AAChC,QAAKJ,QAAQK,KAAR,CAAcC,CAAd,CAAL,EAAwB;AACtB;AACD;AACDN,YAAQK,KAAR,CAAcC,CAAd,IAAmBL,QAAQK,CAAR,CAAnB;AACD,GALD;AAMD;;AAEM,SAASZ,SAAT,CAAmBI,KAAnB,EAA0BC,GAA1B,EAA+BQ,UAA/B,EAA2C;AAChD;;AAEA,MAAMN,UAAUH,MAAM,SAAN,IAAmBA,MAAM,SAAN,KAAoBI,OAAOM,MAAP,CAAc,IAAd,CAAvD;AACA,MAAMC,gBAAgBF,WAAWG,WAAX,MAA4B,EAAlD;AACAR,SAAOC,IAAP,CAAYM,aAAZ,EAA2BL,OAA3B,CAAmC,aAAK;AACtCH,YAAQK,CAAR,IAAaG,cAAcH,CAAd,CAAb;AACD,GAFD;AAGD;;AAUM,SAASX,KAAT,CAAegB,QAAf,EAA2C;AAAA,MAAlBC,WAAkB,uEAAJ,EAAI;;;AAEhD,SAAO,SAASC,QAAT,CAAkBf,KAAlB,EAAyBgB,UAAzB,EAAqCP,UAArC,EAAiD;AACtD,QAAMN,UAAUH,MAAM,SAAN,IAAmBA,MAAM,SAAN,KAAoBI,OAAOM,MAAP,CAAc,IAAd,CAAvD;;AAEAI,gBAAY,SAAZ,IAAyBE,UAAzB;AACAb,YAAQU,QAAR,IAAoBC,WAApB;AAED,GAND;AAOD","file":"watch.js","sourcesContent":["import { warn } from '../utils';\n\nexport const propertyKey = 'watch';\nexport const prototypeKey = '$$Watch';\n\nexport function processor(proto, key, options) {\n  const watches = proto['$$Watch'];\n  if (!watches) return;\n\n  Object.keys(watches).forEach(k => {\n    if ( options.watch[k] ) {\n      warn(`Watch [k] has duplicate handlers`);\n    }\n    options.watch[k] = watches[k];\n  })\n}\n\nexport function decorator(proto, key, descriptor) {\n  \"use strict\";\n  // fake function\n  const watches = proto['$$Watch'] = proto['$$Watch'] || Object.create(null);\n  const originalWatch = descriptor.initializer() || {};\n  Object.keys(originalWatch).forEach(k => {\n    watches[k] = originalWatch[k];\n  });\n}\n\n/**\n * Watch 组件类方法装饰器，用于监听变量变化\n * @param {String} watchKey 被监听的值的路径\n * @param {Object} watchOption 监听选项\n * @param {Boolean} [watchOption.immediate=false] 是否立即出发回调\n * @param {Boolean} [watchOption.deep=false] 是否开启object对象内部变化监听\n * @return {ClassMethodDecorator}\n */\nexport function Watch(watchKey, watchOption = {}) {\n\n  return function decorate(proto, methodName, descriptor) {\n    const watches = proto['$$Watch'] = proto['$$Watch'] || Object.create(null);\n\n    watchOption['handler'] = methodName;\n    watches[watchKey] = watchOption;\n\n  }\n}\n"]}