{"version":3,"sources":["../../../src/type/connect/utils.js"],"names":["toArray","camelToKebab","merge","pick","omit","mapValues","keys","args","slice","Array","prototype","call","str","replace","toLowerCase","target","forEach","Object","obj","key","res","includes","f","array","item","indexOf"],"mappings":";;;QAAgBA,O,GAAAA,O;QAOAC,Y,GAAAA,Y;QAMAC,K,GAAAA,K;QAUAC,I,GAAAA,I;QAUAC,I,GAAAA,I;QAUAC,S,GAAAA,S;QAQAC,I,GAAAA,I;AAnDT,SAASN,OAAT,CAAiBO,IAAjB,EAAuB;;AAE1B,MAAMC,QAAQC,MAAMC,SAAN,CAAgBF,KAA9B;AACA,SAAOA,MAAMG,IAAN,CAAWJ,IAAX,CAAP;AAEH;;AAEM,SAASN,YAAT,CAAsBW,GAAtB,EAA2B;AAChC,SAAOA,IACJC,OADI,CACI,mBADJ,EACyB,OADzB,EAEJC,WAFI,EAAP;AAGD;;AAEM,SAASZ,KAAT,GAAwB;AAC7B,MAAMa,SAAS,EAAf;;AAD6B,oCAANR,IAAM;AAANA,QAAM;AAAA;;AAE7BA,OAAKS,OAAL,CAAa,eAAO;AAClBC,WAAOX,IAAP,CAAYY,GAAZ,EAAiBF,OAAjB,CAAyB,eAAO;AAC9BD,aAAOI,GAAP,IAAcD,IAAIC,GAAJ,CAAd;AACD,KAFD;AAGD,GAJD;AAKA,SAAOJ,MAAP;AACD;;AAEM,SAASZ,IAAT,CAAce,GAAd,EAAmBZ,IAAnB,EAAyB;AAC9B,MAAMc,MAAM,EAAZ;AACAd,OAAKU,OAAL,CAAa,eAAO;AAClB,QAAIE,IAAIC,GAAJ,MAAa,KAAK,CAAtB,EAAyB;AACvBC,UAAID,GAAJ,IAAWD,IAAIC,GAAJ,CAAX;AACD;AACF,GAJD;AAKA,SAAOC,GAAP;AACD;;AAEM,SAAShB,IAAT,CAAcc,GAAd,EAAmBZ,IAAnB,EAAyB;AAC9B,MAAMc,MAAM,EAAZ;AACAH,SAAOX,IAAP,CAAYY,GAAZ,EAAiBF,OAAjB,CAAyB,eAAO;AAC9B,QAAI,CAACK,SAASf,IAAT,EAAea,GAAf,CAAL,EAA0B;AACxBC,UAAID,GAAJ,IAAWD,IAAIC,GAAJ,CAAX;AACD;AACF,GAJD;AAKA,SAAOC,GAAP;AACD;;AAEM,SAASf,SAAT,CAAmBa,GAAnB,EAAwBI,CAAxB,EAA2B;AAChC,MAAMF,MAAM,EAAZ;AACAH,SAAOX,IAAP,CAAYY,GAAZ,EAAiBF,OAAjB,CAAyB,eAAO;AAC9BI,QAAID,GAAJ,IAAWG,EAAEJ,IAAIC,GAAJ,CAAF,EAAYA,GAAZ,CAAX;AACD,GAFD;AAGA,SAAOC,GAAP;AACD;;AAEM,SAASd,IAAT,GAAuB;AAC5B,SAAOW,OAAOX,IAAP,CAAYJ,iCAAZ,CAAP;AACD;;AAED,SAASmB,QAAT,CAAkBE,KAAlB,EAAyBC,IAAzB,EAA+B;AAC7B,SAAOD,MAAME,OAAN,CAAcD,IAAd,IAAsB,CAAC,CAA9B;AACD","file":"utils.js","sourcesContent":["export function toArray(args) {\n  \n    const slice = Array.prototype.slice;\n    return slice.call(args);\n  \n}\n\nexport function camelToKebab(str) {\n  return str\n    .replace(/([a-z\\d])([A-Z])/g, '$1-$2')\n    .toLowerCase()\n}\n\nexport function merge(...args) {\n  const target = {}\n  args.forEach(obj => {\n    Object.keys(obj).forEach(key => {\n      target[key] = obj[key]\n    })\n  })\n  return target\n}\n\nexport function pick(obj, keys) {\n  const res = {}\n  keys.forEach(key => {\n    if (obj[key] !== void 0) {\n      res[key] = obj[key]\n    }\n  })\n  return res\n}\n\nexport function omit(obj, keys) {\n  const res = {}\n  Object.keys(obj).forEach(key => {\n    if (!includes(keys, key)) {\n      res[key] = obj[key]\n    }\n  })\n  return res\n}\n\nexport function mapValues(obj, f) {\n  const res = {}\n  Object.keys(obj).forEach(key => {\n    res[key] = f(obj[key], key)\n  })\n  return res\n}\n\nexport function keys(...args) {\n  return Object.keys(merge(...args))\n}\n\nfunction includes(array, item) {\n  return array.indexOf(item) > -1\n}\n"]}